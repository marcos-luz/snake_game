{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/marcos/\\xC1rea de Trabalho/Web Projects/snake/src/App.js\";\nconst start = {\n  active: true,\n  speed: 120,\n  // ms\n  direction: \"right\",\n  snake: [[50, 70], [60, 70], [70, 70], [80, 70]],\n  // Start with 4 block snake\n  food: [200, 70],\n  score: 0,\n  high_score: localStorage.getItem(\"high_score\")\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.startStop = manual => {\n      let active = this.state.active; //console.log(localStorage.getItem('high_score'));\n\n      if (manual) {\n        this.setState({\n          active: !active\n        });\n      } // This is reading the previous state, before manual switched it\n\n\n      if (!active) {\n        this.interval = setInterval(() => this.updateSnake(), this.state.speed);\n      } else {\n        clearInterval(this.interval);\n        let high_score = this.state.high_score;\n\n        if (this.state.score > high_score) {\n          high_score = this.state.score;\n        }\n\n        localStorage.setItem(\"high_score\", high_score);\n        this.setState({\n          active: false,\n          speed: 120,\n          // ms\n          direction: \"right\",\n          snake: [[50, 70], [60, 70], [70, 70], [80, 70]],\n          // Start with 4 block snake\n          food: [200, 70],\n          score: 0,\n          high_score: high_score\n        });\n      }\n    };\n\n    this.handleKeys = event => {\n      let currentD = this.state.direction;\n      console.log(currentD);\n      let active = this.state.active; //  console.log(event.keyCode);\n\n      if (event.keyCode === 13) {\n        this.startStop(true);\n      }\n\n      if (event.keyCode === 65 && currentD != \"right\") {\n        this.setState({\n          direction: \"left\"\n        });\n        this.swapClass();\n      }\n\n      if (event.keyCode === 68 && currentD != \"left\") {\n        this.setState({\n          direction: \"right\"\n        });\n        this.swapClass();\n      }\n\n      if (event.keyCode === 87 && currentD != \"down\") {\n        this.setState({\n          direction: \"up\"\n        });\n        this.swapClass();\n      }\n\n      if (event.keyCode === 83 && currentD != \"up\") {\n        this.setState({\n          direction: \"down\"\n        });\n        this.swapClass();\n      }\n    };\n\n    this.speedUp = () => {\n      let speed = this.state.speed;\n\n      if (speed > 50) {\n        speed = speed - 2;\n      }\n\n      clearInterval(this.interval);\n      this.interval = setInterval(() => this.updateSnake(), speed);\n      this.setState({\n        speed: speed\n      });\n    };\n\n    this.swapClass = () => {\n      var root = document.getElementById(\"root\");\n      root.className = \"\";\n      root.className = this.state.direction;\n    };\n\n    this.state = start;\n  }\n\n  updateSnake() {\n    var direction = this.state.direction;\n    var currentSnake = this.state.snake;\n    var snakeHead = currentSnake[currentSnake.length - 1];\n    var newHead = [];\n    var target = this.state.food;\n\n    switch (direction) {\n      case \"up\":\n        newHead = [snakeHead[0], snakeHead[1] - 10];\n        break;\n\n      case \"right\":\n        newHead = [snakeHead[0] + 10, snakeHead[1]];\n        break;\n\n      case \"down\":\n        newHead = [snakeHead[0], snakeHead[1] + 10];\n        break;\n\n      case \"left\":\n        newHead = [snakeHead[0] - 10, snakeHead[1]];\n        break;\n\n      default:\n        newHead = [snakeHead[0], snakeHead[1]];\n    }\n\n    currentSnake.push(newHead);\n    currentSnake.forEach((val, i, array) => {\n      // As long as its not checking against itself...\n      if (i != array.length - 1) {\n        // Check if its colluding with its body\n        if (val.toString() == newHead.toString()) {\n          // Head has collided with body\n          //   console.log('collide');\n          this.startStop(true);\n        }\n      }\n    }); // collusion detection\n\n    if (newHead[0] > 390 || newHead[0] < 0 || newHead[1] > 320 || newHead[1] < 30) {\n      // Enable this is you want the wall collusion rule\n      // this.startStop(true);\n      // This is teleporting the snake through the walls\n      let teleHead = currentSnake[currentSnake.length - 1];\n\n      if (newHead[0] > 390) {\n        teleHead[0] = teleHead[0] - 400;\n        currentSnake.shift();\n      }\n\n      if (newHead[0] < 0) {\n        teleHead[0] = teleHead[0] + 400;\n        currentSnake.shift();\n      }\n\n      if (newHead[1] > 320) {\n        teleHead[1] = teleHead[1] - 300;\n        currentSnake.shift();\n      }\n\n      if (newHead[1] < 30) {\n        teleHead[1] = teleHead[1] + 300;\n        currentSnake.shift();\n      }\n    } else {\n      // If food is eaten\n      if (newHead[0] == target[0] && newHead[1] == target[1]) {\n        let posX = Math.floor(Math.random() * (380 - 10 + 1)) + 10;\n        let posY = Math.floor(Math.random() * (280 - 40 + 1)) + 40;\n        posX = Math.ceil(posX / 10) * 10;\n        posY = Math.ceil(posY / 10) * 10;\n        this.setState(prevState => ({\n          snake: currentSnake,\n          food: [posX, posY],\n          score: prevState.score + 1\n        }));\n      } else {\n        currentSnake.shift();\n\n        if (this.state.active) {\n          this.setState({\n            snake: currentSnake\n          });\n        }\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.swapClass();\n    document.addEventListener(\"keydown\", this.handleKeys, false);\n\n    if (this.state.active) {\n      this.startStop(false);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // When the state changes, check if we've reached a % 5 milestone\n    // Run speedUp once, but not again until next time (state updates each time snake moves)\n    let score = this.state.score;\n\n    if (score % 3 == 0 && score > 0 && score != prevState.score) {\n      this.speedUp();\n    }\n\n    document.addEventListener(\"keydown\", this.handleKeys, false);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    var theSnake = this.state.snake;\n    var food = this.state.food;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Menu, {\n        active: this.state.active\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Score, {\n        score: this.state.score,\n        high_score: this.state.high_score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), theSnake.map((val, i) => /*#__PURE__*/_jsxDEV(Part, {\n        transition: this.state.speed,\n        direction: this.state.direction,\n        top: val[1],\n        left: val[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(Food, {\n        top: food[1],\n        left: food[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/marcos/√Årea de Trabalho/Web Projects/snake/src/App.js"],"names":["start","active","speed","direction","snake","food","score","high_score","localStorage","getItem","App","React","Component","constructor","props","startStop","manual","state","setState","interval","setInterval","updateSnake","clearInterval","setItem","handleKeys","event","currentD","console","log","keyCode","swapClass","speedUp","root","document","getElementById","className","currentSnake","snakeHead","length","newHead","target","push","forEach","val","i","array","toString","teleHead","shift","posX","Math","floor","random","posY","ceil","prevState","componentDidMount","addEventListener","componentDidUpdate","prevProps","componentWillUnmount","render","theSnake","map"],"mappings":"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","sourcesContent":["const start = {\n  active: true,\n  speed: 120, // ms\n  direction: \"right\",\n  snake: [[50, 70], [60, 70], [70, 70], [80, 70]], // Start with 4 block snake\n  food: [200, 70],\n  score: 0,\n  high_score: localStorage.getItem(\"high_score\")\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = start;\n  }\n\n  startStop = manual => {\n    let active = this.state.active;\n    //console.log(localStorage.getItem('high_score'));\n    if (manual) {\n      this.setState({ active: !active });\n    }\n    // This is reading the previous state, before manual switched it\n    if (!active) {\n      this.interval = setInterval(() => this.updateSnake(), this.state.speed);\n    } else {\n      clearInterval(this.interval);\n      let high_score = this.state.high_score;\n      if (this.state.score > high_score) {\n        high_score = this.state.score;\n      }\n      localStorage.setItem(\"high_score\", high_score);\n      this.setState({\n        active: false,\n        speed: 120, // ms\n        direction: \"right\",\n        snake: [[50, 70], [60, 70], [70, 70], [80, 70]], // Start with 4 block snake\n        food: [200, 70],\n        score: 0,\n        high_score: high_score\n      });\n    }\n  };\n\n  updateSnake() {\n    var direction = this.state.direction;\n    var currentSnake = this.state.snake;\n    var snakeHead = currentSnake[currentSnake.length - 1];\n    var newHead = [];\n    var target = this.state.food;\n    switch (direction) {\n      case \"up\":\n        newHead = [snakeHead[0], snakeHead[1] - 10];\n        break;\n      case \"right\":\n        newHead = [snakeHead[0] + 10, snakeHead[1]];\n        break;\n      case \"down\":\n        newHead = [snakeHead[0], snakeHead[1] + 10];\n        break;\n      case \"left\":\n        newHead = [snakeHead[0] - 10, snakeHead[1]];\n        break;\n      default:\n        newHead = [snakeHead[0], snakeHead[1]];\n    }\n    currentSnake.push(newHead);\n\n    currentSnake.forEach((val, i, array) => {\n      // As long as its not checking against itself...\n      if (i != array.length - 1) {\n        // Check if its colluding with its body\n        if (val.toString() == newHead.toString()) {\n          // Head has collided with body\n          //   console.log('collide');\n          this.startStop(true);\n        }\n      }\n    });\n\n    // collusion detection\n    if (\n      newHead[0] > 390 ||\n      newHead[0] < 0 ||\n      newHead[1] > 320 ||\n      newHead[1] < 30\n    ) {\n      // Enable this is you want the wall collusion rule\n      // this.startStop(true);\n\n      // This is teleporting the snake through the walls\n      let teleHead = currentSnake[currentSnake.length - 1];\n      if (newHead[0] > 390) {\n        teleHead[0] = teleHead[0] - 400;\n        currentSnake.shift();\n      }\n      if (newHead[0] < 0) {\n        teleHead[0] = teleHead[0] + 400;\n        currentSnake.shift();\n      }\n      if (newHead[1] > 320) {\n        teleHead[1] = teleHead[1] - 300;\n        currentSnake.shift();\n      }\n      if (newHead[1] < 30) {\n        teleHead[1] = teleHead[1] + 300;\n        currentSnake.shift();\n      }\n    } else {\n      // If food is eaten\n      if (newHead[0] == target[0] && newHead[1] == target[1]) {\n        let posX = Math.floor(Math.random() * (380 - 10 + 1)) + 10;\n        let posY = Math.floor(Math.random() * (280 - 40 + 1)) + 40;\n        posX = Math.ceil(posX / 10) * 10;\n        posY = Math.ceil(posY / 10) * 10;\n        this.setState(prevState => ({\n          snake: currentSnake,\n          food: [posX, posY],\n          score: prevState.score + 1\n        }));\n      } else {\n        currentSnake.shift();\n        if (this.state.active) {\n          this.setState({ snake: currentSnake });\n        }\n      }\n    }\n  }\n\n  handleKeys = event => {\n    let currentD = this.state.direction;\n    console.log(currentD);\n    let active = this.state.active;\n    //  console.log(event.keyCode);\n    if (event.keyCode === 13) {\n      this.startStop(true);\n    }\n    if (event.keyCode === 65 && currentD != \"right\") {\n      this.setState({ direction: \"left\" });\n      this.swapClass();\n    }\n    if (event.keyCode === 68 && currentD != \"left\") {\n      this.setState({ direction: \"right\" });\n      this.swapClass();\n    }\n    if (event.keyCode === 87 && currentD != \"down\") {\n      this.setState({ direction: \"up\" });\n      this.swapClass();\n    }\n    if (event.keyCode === 83 && currentD != \"up\") {\n      this.setState({ direction: \"down\" });\n      this.swapClass();\n    }\n  };\n\n  componentDidMount() {\n    this.swapClass();\n    document.addEventListener(\"keydown\", this.handleKeys, false);\n    if (this.state.active) {\n      this.startStop(false);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // When the state changes, check if we've reached a % 5 milestone\n    // Run speedUp once, but not again until next time (state updates each time snake moves)\n    let score = this.state.score;\n    if (score % 3 == 0 && score > 0 && score != prevState.score) {\n      this.speedUp();\n    }\n\n    document.addEventListener(\"keydown\", this.handleKeys, false);\n  }\n\n  speedUp = () => {\n    let speed = this.state.speed;\n    if (speed > 50) {\n      speed = speed - 2;\n    }\n    clearInterval(this.interval);\n    this.interval = setInterval(() => this.updateSnake(), speed);\n    this.setState({ speed: speed });\n  };\n\n  // #root takes on the class of the direction, good for styling opportunities?\n  swapClass = () => {\n    var root = document.getElementById(\"root\");\n    root.className = \"\";\n    root.className = this.state.direction;\n  };\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    var theSnake = this.state.snake;\n    var food = this.state.food;\n    return (\n      <React.Fragment>\n        <Menu active={this.state.active} />\n        <Score score={this.state.score} high_score={this.state.high_score} />\n        {theSnake.map((val, i) => (\n          <Part\n            transition={this.state.speed}\n            direction={this.state.direction}\n            top={val[1]}\n            left={val[0]}\n          />\n        ))}\n        <Food top={food[1]} left={food[0]} />\n      </React.Fragment>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}