{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/marcos/\\xC1rea de Trabalho/Web Projects/snake/src/App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"src/App.js\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 16\n        }, this), \" and save to reload.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactjs.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Learn React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App; // // Control with the arrow keys\n// // *NOTE*: in Codepen you must click on the preview port to\n// // for the window to register key presses\n// // Known bug: You can potentially turn the snake around too fast\n// //            causing a collusion / reset\n// const start = {\n//   active: true,\n//   speed: 120, // ms\n//   direction: \"right\",\n//   snake: [[50, 70], [60, 70], [70, 70], [80, 70]], // Start with 4 block snake\n//   food: [200, 70],\n//   score: 0,\n//   high_score: localStorage.getItem(\"high_score\")\n// };\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = start;\n//   }\n//   startStop = manual => {\n//     let active = this.state.active;\n//     //console.log(localStorage.getItem('high_score'));\n//     if (manual) {\n//       this.setState({ active: !active });\n//     }\n//     // This is reading the previous state, before manual switched it\n//     if (!active) {\n//       this.interval = setInterval(() => this.updateSnake(), this.state.speed);\n//     } else {\n//       clearInterval(this.interval);\n//       let high_score = this.state.high_score;\n//       if (this.state.score > high_score) {\n//         high_score = this.state.score;\n//       }\n//       localStorage.setItem(\"high_score\", high_score);\n//       this.setState({\n//         active: false,\n//         speed: 120, // ms\n//         direction: \"right\",\n//         snake: [[50, 70], [60, 70], [70, 70], [80, 70]], // Start with 4 block snake\n//         food: [200, 70],\n//         score: 0,\n//         high_score: high_score\n//       });\n//     }\n//   };\n//   updateSnake() {\n//     var direction = this.state.direction;\n//     var currentSnake = this.state.snake;\n//     var snakeHead = currentSnake[currentSnake.length - 1];\n//     var newHead = [];\n//     var target = this.state.food;\n//     switch (direction) {\n//       case \"up\":\n//         newHead = [snakeHead[0], snakeHead[1] - 10];\n//         break;\n//       case \"right\":\n//         newHead = [snakeHead[0] + 10, snakeHead[1]];\n//         break;\n//       case \"down\":\n//         newHead = [snakeHead[0], snakeHead[1] + 10];\n//         break;\n//       case \"left\":\n//         newHead = [snakeHead[0] - 10, snakeHead[1]];\n//         break;\n//       default:\n//         newHead = [snakeHead[0], snakeHead[1]];\n//     }\n//     currentSnake.push(newHead);\n//     currentSnake.forEach((val, i, array) => {\n//       // As long as its not checking against itself...\n//       if (i != array.length - 1) {\n//         // Check if its colluding with its body\n//         if (val.toString() == newHead.toString()) {\n//           // Head has collided with body\n//           //   console.log('collide');\n//           this.startStop(true);\n//         }\n//       }\n//     });\n//     // collusion detection\n//     if (\n//       newHead[0] > 390 ||\n//       newHead[0] < 0 ||\n//       newHead[1] > 320 ||\n//       newHead[1] < 30\n//     ) {\n//       // Enable this is you want the wall collusion rule\n//       // this.startStop(true);\n//       // This is teleporting the snake through the walls\n//       let teleHead = currentSnake[currentSnake.length - 1];\n//       if (newHead[0] > 390) {\n//         teleHead[0] = teleHead[0] - 400;\n//         currentSnake.shift();\n//       }\n//       if (newHead[0] < 0) {\n//         teleHead[0] = teleHead[0] + 400;\n//         currentSnake.shift();\n//       }\n//       if (newHead[1] > 320) {\n//         teleHead[1] = teleHead[1] - 300;\n//         currentSnake.shift();\n//       }\n//       if (newHead[1] < 30) {\n//         teleHead[1] = teleHead[1] + 300;\n//         currentSnake.shift();\n//       }\n//     } else {\n//       // If food is eaten\n//       if (newHead[0] == target[0] && newHead[1] == target[1]) {\n//         let posX = Math.floor(Math.random() * (380 - 10 + 1)) + 10;\n//         let posY = Math.floor(Math.random() * (280 - 40 + 1)) + 40;\n//         posX = Math.ceil(posX / 10) * 10;\n//         posY = Math.ceil(posY / 10) * 10;\n//         this.setState(prevState => ({\n//           snake: currentSnake,\n//           food: [posX, posY],\n//           score: prevState.score + 1\n//         }));\n//       } else {\n//         currentSnake.shift();\n//         if (this.state.active) {\n//           this.setState({ snake: currentSnake });\n//         }\n//       }\n//     }\n//   }\n//   handleKeys = event => {\n//     let currentD = this.state.direction;\n//     console.log(currentD);\n//     let active = this.state.active;\n//     //  console.log(event.keyCode);\n//     if (event.keyCode === 13) {\n//       this.startStop(true);\n//     }\n//     if (event.keyCode === 65 && currentD != \"right\") {\n//       this.setState({ direction: \"left\" });\n//       this.swapClass();\n//     }\n//     if (event.keyCode === 68 && currentD != \"left\") {\n//       this.setState({ direction: \"right\" });\n//       this.swapClass();\n//     }\n//     if (event.keyCode === 87 && currentD != \"down\") {\n//       this.setState({ direction: \"up\" });\n//       this.swapClass();\n//     }\n//     if (event.keyCode === 83 && currentD != \"up\") {\n//       this.setState({ direction: \"down\" });\n//       this.swapClass();\n//     }\n//   };\n//   componentDidMount() {\n//     this.swapClass();\n//     document.addEventListener(\"keydown\", this.handleKeys, false);\n//     if (this.state.active) {\n//       this.startStop(false);\n//     }\n//   }\n//   componentDidUpdate(prevProps, prevState) {\n//     // When the state changes, check if we've reached a % 5 milestone\n//     // Run speedUp once, but not again until next time (state updates each time snake moves)\n//     let score = this.state.score;\n//     if (score % 3 == 0 && score > 0 && score != prevState.score) {\n//       this.speedUp();\n//     }\n//     document.addEventListener(\"keydown\", this.handleKeys, false);\n//   }\n//   speedUp = () => {\n//     let speed = this.state.speed;\n//     if (speed > 50) {\n//       speed = speed - 2;\n//     }\n//     clearInterval(this.interval);\n//     this.interval = setInterval(() => this.updateSnake(), speed);\n//     this.setState({ speed: speed });\n//   };\n//   // #root takes on the class of the direction, good for styling opportunities?\n//   swapClass = () => {\n//     var root = document.getElementById(\"root\");\n//     root.className = \"\";\n//     root.className = this.state.direction;\n//   };\n//   componentWillUnmount() {\n//     clearInterval(this.interval);\n//   }\n//   render() {\n//     var theSnake = this.state.snake;\n//     var food = this.state.food;\n//     return (\n//       <React.Fragment>\n//         <Menu active={this.state.active} />\n//         <Score score={this.state.score} high_score={this.state.high_score} />\n//         {theSnake.map((val, i) => (\n//           <Part\n//             transition={this.state.speed}\n//             direction={this.state.direction}\n//             top={val[1]}\n//             left={val[0]}\n//           />\n//         ))}\n//         <Food top={food[1]} left={food[0]} />\n//       </React.Fragment>\n//     );\n//   }\n// }\n// class Score extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     let snake = this.props.snake;\n//     return (\n//       <div className=\"score\">\n//         <span>\n//           Score: <strong>{this.props.score}</strong>\n//         </span>\n//         <span>\n//           High Score: <strong>{this.props.high_score}</strong>\n//         </span>\n//       </div>\n//     );\n//   }\n// }\n// class Part extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {};\n//   }\n//   render() {\n//     var classes = \"part \" + this.props.direction;\n//     return (\n//       <article\n//         style={{\n//           transition: this.props.transition + 50 + \"ms\",\n//           top: this.props.top + \"px\",\n//           left: this.props.left + \"px\"\n//         }}\n//         className={classes}\n//       />\n//     );\n//   }\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/marcos/√Årea de Trabalho/Web Projects/snake/src/App.js"],"names":["App","logo"],"mappings":";;;AACA,OAAO,WAAP;;AAEA,SAASA,GAAT,GAAe;AACb,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACE;AAAK,QAAA,GAAG,EAAEC,IAAV;AAAgB,QAAA,SAAS,EAAC,UAA1B;AAAqC,QAAA,GAAG,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,yCACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADP;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAKE;AACE,QAAA,SAAS,EAAC,UADZ;AAEE,QAAA,IAAI,EAAC,qBAFP;AAGE,QAAA,MAAM,EAAC,QAHT;AAIE,QAAA,GAAG,EAAC,qBAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;KAnBQD,G;AAqBT,eAAeA,GAAfsourcesContent":["import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n\n// // Control with the arrow keys\n// // *NOTE*: in Codepen you must click on the preview port to\n// // for the window to register key presses\n// // Known bug: You can potentially turn the snake around too fast\n// //            causing a collusion / reset\n\n// const start = {\n//   active: true,\n//   speed: 120, // ms\n//   direction: \"right\",\n//   snake: [[50, 70], [60, 70], [70, 70], [80, 70]], // Start with 4 block snake\n//   food: [200, 70],\n//   score: 0,\n//   high_score: localStorage.getItem(\"high_score\")\n// };\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = start;\n//   }\n\n//   startStop = manual => {\n//     let active = this.state.active;\n//     //console.log(localStorage.getItem('high_score'));\n//     if (manual) {\n//       this.setState({ active: !active });\n//     }\n//     // This is reading the previous state, before manual switched it\n//     if (!active) {\n//       this.interval = setInterval(() => this.updateSnake(), this.state.speed);\n//     } else {\n//       clearInterval(this.interval);\n//       let high_score = this.state.high_score;\n//       if (this.state.score > high_score) {\n//         high_score = this.state.score;\n//       }\n//       localStorage.setItem(\"high_score\", high_score);\n//       this.setState({\n//         active: false,\n//         speed: 120, // ms\n//         direction: \"right\",\n//         snake: [[50, 70], [60, 70], [70, 70], [80, 70]], // Start with 4 block snake\n//         food: [200, 70],\n//         score: 0,\n//         high_score: high_score\n//       });\n//     }\n//   };\n\n//   updateSnake() {\n//     var direction = this.state.direction;\n//     var currentSnake = this.state.snake;\n//     var snakeHead = currentSnake[currentSnake.length - 1];\n//     var newHead = [];\n//     var target = this.state.food;\n//     switch (direction) {\n//       case \"up\":\n//         newHead = [snakeHead[0], snakeHead[1] - 10];\n//         break;\n//       case \"right\":\n//         newHead = [snakeHead[0] + 10, snakeHead[1]];\n//         break;\n//       case \"down\":\n//         newHead = [snakeHead[0], snakeHead[1] + 10];\n//         break;\n//       case \"left\":\n//         newHead = [snakeHead[0] - 10, snakeHead[1]];\n//         break;\n//       default:\n//         newHead = [snakeHead[0], snakeHead[1]];\n//     }\n//     currentSnake.push(newHead);\n\n//     currentSnake.forEach((val, i, array) => {\n//       // As long as its not checking against itself...\n//       if (i != array.length - 1) {\n//         // Check if its colluding with its body\n//         if (val.toString() == newHead.toString()) {\n//           // Head has collided with body\n//           //   console.log('collide');\n//           this.startStop(true);\n//         }\n//       }\n//     });\n\n//     // collusion detection\n//     if (\n//       newHead[0] > 390 ||\n//       newHead[0] < 0 ||\n//       newHead[1] > 320 ||\n//       newHead[1] < 30\n//     ) {\n//       // Enable this is you want the wall collusion rule\n//       // this.startStop(true);\n\n//       // This is teleporting the snake through the walls\n//       let teleHead = currentSnake[currentSnake.length - 1];\n//       if (newHead[0] > 390) {\n//         teleHead[0] = teleHead[0] - 400;\n//         currentSnake.shift();\n//       }\n//       if (newHead[0] < 0) {\n//         teleHead[0] = teleHead[0] + 400;\n//         currentSnake.shift();\n//       }\n//       if (newHead[1] > 320) {\n//         teleHead[1] = teleHead[1] - 300;\n//         currentSnake.shift();\n//       }\n//       if (newHead[1] < 30) {\n//         teleHead[1] = teleHead[1] + 300;\n//         currentSnake.shift();\n//       }\n//     } else {\n//       // If food is eaten\n//       if (newHead[0] == target[0] && newHead[1] == target[1]) {\n//         let posX = Math.floor(Math.random() * (380 - 10 + 1)) + 10;\n//         let posY = Math.floor(Math.random() * (280 - 40 + 1)) + 40;\n//         posX = Math.ceil(posX / 10) * 10;\n//         posY = Math.ceil(posY / 10) * 10;\n//         this.setState(prevState => ({\n//           snake: currentSnake,\n//           food: [posX, posY],\n//           score: prevState.score + 1\n//         }));\n//       } else {\n//         currentSnake.shift();\n//         if (this.state.active) {\n//           this.setState({ snake: currentSnake });\n//         }\n//       }\n//     }\n//   }\n\n//   handleKeys = event => {\n//     let currentD = this.state.direction;\n//     console.log(currentD);\n//     let active = this.state.active;\n//     //  console.log(event.keyCode);\n//     if (event.keyCode === 13) {\n//       this.startStop(true);\n//     }\n//     if (event.keyCode === 65 && currentD != \"right\") {\n//       this.setState({ direction: \"left\" });\n//       this.swapClass();\n//     }\n//     if (event.keyCode === 68 && currentD != \"left\") {\n//       this.setState({ direction: \"right\" });\n//       this.swapClass();\n//     }\n//     if (event.keyCode === 87 && currentD != \"down\") {\n//       this.setState({ direction: \"up\" });\n//       this.swapClass();\n//     }\n//     if (event.keyCode === 83 && currentD != \"up\") {\n//       this.setState({ direction: \"down\" });\n//       this.swapClass();\n//     }\n//   };\n\n//   componentDidMount() {\n//     this.swapClass();\n//     document.addEventListener(\"keydown\", this.handleKeys, false);\n//     if (this.state.active) {\n//       this.startStop(false);\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     // When the state changes, check if we've reached a % 5 milestone\n//     // Run speedUp once, but not again until next time (state updates each time snake moves)\n//     let score = this.state.score;\n//     if (score % 3 == 0 && score > 0 && score != prevState.score) {\n//       this.speedUp();\n//     }\n\n//     document.addEventListener(\"keydown\", this.handleKeys, false);\n//   }\n\n//   speedUp = () => {\n//     let speed = this.state.speed;\n//     if (speed > 50) {\n//       speed = speed - 2;\n//     }\n//     clearInterval(this.interval);\n//     this.interval = setInterval(() => this.updateSnake(), speed);\n//     this.setState({ speed: speed });\n//   };\n\n//   // #root takes on the class of the direction, good for styling opportunities?\n//   swapClass = () => {\n//     var root = document.getElementById(\"root\");\n//     root.className = \"\";\n//     root.className = this.state.direction;\n//   };\n\n//   componentWillUnmount() {\n//     clearInterval(this.interval);\n//   }\n\n//   render() {\n//     var theSnake = this.state.snake;\n//     var food = this.state.food;\n//     return (\n//       <React.Fragment>\n//         <Menu active={this.state.active} />\n//         <Score score={this.state.score} high_score={this.state.high_score} />\n//         {theSnake.map((val, i) => (\n//           <Part\n//             transition={this.state.speed}\n//             direction={this.state.direction}\n//             top={val[1]}\n//             left={val[0]}\n//           />\n//         ))}\n//         <Food top={food[1]} left={food[0]} />\n//       </React.Fragment>\n//     );\n//   }\n// }\n\n// class Score extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     let snake = this.props.snake;\n//     return (\n//       <div className=\"score\">\n//         <span>\n//           Score: <strong>{this.props.score}</strong>\n//         </span>\n//         <span>\n//           High Score: <strong>{this.props.high_score}</strong>\n//         </span>\n//       </div>\n//     );\n//   }\n// }\n\n// class Part extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {};\n//   }\n\n//   render() {\n//     var classes = \"part \" + this.props.direction;\n//     return (\n//       <article\n//         style={{\n//           transition: this.props.transition + 50 + \"ms\",\n//           top: this.props.top + \"px\",\n//           left: this.props.left + \"px\"\n//         }}\n//         className={classes}\n//       />\n//     );\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}